from IPython.display import display, HTML

# Function to compare two feature dictionaries
def compare_feature_dicts(dict1, dict2):
    """
    Compares two feature dictionaries and returns a report of differences.
    
    Parameters:
        dict1 (dict): The first feature dictionary (e.g., featureDict1).
        dict2 (dict): The second feature dictionary (e.g., featureDict2).
    
    Returns:
        dict: A dictionary containing the differences between dict1 and dict2.
    """
    report = {
        'only_in_dict1': [],
        'only_in_dict2': [],
        'differences_in_common': {}
    }
    
    # Convert keys to sets for set operations
    keys1 = set(dict1.keys())
    keys2 = set(dict2.keys())
    
    # Features only in dict1
    only_in_1 = keys1 - keys2
    report['only_in_dict1'] = sorted(list(only_in_1))
    
    # Features only in dict2
    only_in_2 = keys2 - keys1
    report['only_in_dict2'] = sorted(list(only_in_2))
    
    # Features present in both dictionaries
    common_features = keys1 & keys2
    
    for feature in common_features:
        differences = {}
        feature1 = dict1[feature]
        feature2 = dict2[feature]
        
        # Compare 'descr', 'type', 'datatype'
        for key in ['descr', 'type', 'datatype']:
            if feature1.get(key) != feature2.get(key):
                differences[key] = {
                    'dict1': feature1.get(key),
                    'dict2': feature2.get(key)
                }
        
        # Compare 'freqlist'
        freqlist1 = feature1.get('freqlist', {})
        freqlist2 = feature2.get('freqlist', {})
        
        freqlist_diff = {}

        # Compare individual frequency items and only report differences in the values
        for nodetype in freqlist1.keys() & freqlist2.keys():  # only compare nodetypes present in both
            freq1 = dict(freqlist1.get(nodetype, []))
            freq2 = dict(freqlist2.get(nodetype, []))
            
            diff = {}

            # Compare each key in the freqlist for differences
            for k, v in freq1.items():
                if k in freq2 and freq2[k] != v:
                    diff[k] = {'dict1': v, 'dict2': freq2[k]}
            
            if diff:
                freqlist_diff[nodetype] = diff
        
        if freqlist_diff:
            differences['freqlist'] = freqlist_diff
        
        if differences:
            report['differences_in_common'][feature] = differences
    
    return report



# Function to generate HTML delta report
def generate_html_delta_report(report):
    """
    Generates an HTML delta report from the comparison with highlighted differences.
    
    Parameters:
        report (dict): The comparison report generated by compare_feature_dicts.
    
    Returns:
        str: The formatted delta report in HTML.
    """
    html = []
    html.append("<!DOCTYPE html>")
    html.append("<html lang='en'>")
    html.append("<head>")
    html.append("<meta charset='UTF-8'>")
    html.append("<meta name='viewport' content='width=device-width, initial-scale=1.0'>")
    html.append("<title>Delta Report</title>")
    # Add some basic styling
    html.append("""
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .only-in-1 { color: #E74C3C; }
        .only-in-2 { color: #E67E22; }
        .feature-name { color: #2980B9; }
        .diff-key { color: #8E44AD; }
        .freq-type { color: #16A085; }
        .freq-value { color: #D35400; }
        .section { margin-bottom: 20px; }
        ul { list-style-type: disc; margin-left: 40px; }
        .nodetype { color: #2C3E50; }
        .api1 { color: #3498DB; }
        .api2 { color: #1ABC9C; }
        table { border-collapse: collapse; width: 100%; margin-bottom: 20px; }
        th, td { border: 1px solid #dddddd; text-align: left; padding: 8px; }
        th { background-color: #f2f2f2; }
    </style>
    """)
    html.append("</head>")
    html.append("<body>")
    
    html.append("<h1>Delta Report</h1>")
    
    # Features only in dict1
    if report['only_in_dict1']:
        html.append("<div class='section'>")
        html.append("<h2>Features only in dataset 1:</h2>")
        html.append("<ul>")
        for feature in report['only_in_dict1']:
            html.append(f"<li class='only-in-1'>{feature}</li>")
        html.append("</ul>")
        html.append("</div>")
    
    # Features only in dict2
    if report['only_in_dict2']:
        html.append("<div class='section'>")
        html.append("<h2>Features only in dataset 2:</h2>")
        html.append("<ul>")
        for feature in report['only_in_dict2']:
            html.append(f"<li class='only-in-2'>{feature}</li>")
        html.append("</ul>")
        html.append("</div>")
    
    # Differences in common features
    if report['differences_in_common']:
        html.append("<div class='section'>")
        html.append("<h2>Differences in Common Features:</h2>")
        for feature, diffs in report['differences_in_common'].items():
            html.append(f"<h3 class='feature-name'>Feature: {feature}</h3>")
            for key, change in diffs.items():
                if key in ['descr', 'type', 'datatype']:
                    html.append(f"<p><strong class='diff-key'>{key}:</strong></p>")
                    html.append("<ul>")
                    html.append(f"<li class='api1'>Dataset 1: {change['dict1']}</li>")
                    html.append(f"<li class='api2'>Dataset 2: {change['dict2']}</li>")
                    html.append("</ul>")
                elif key == 'freqlist':
                    freqlist = change
                    for nodetype, freq_diff in freqlist.items():
                        html.append(f"<p><strong class='diff-key'>Nodetype: {nodetype}</strong></p>")
                        html.append("<ul>")
                        for subkey, subval in freq_diff.items():
                            html.append(f"<li>{subkey}:<br>Dataset 1: {subval['dict1']},'<br>Dataset 2: {subval['dict2']}</li>")
                        html.append("</ul>")
        html.append("</div>")
    
    html.append("</body>")
    html.append("</html>")
    
    report_html = "\n".join(html)
    
    return report_html






# Function to display HTML report in Jupyter Notebook
def display_html_report(report_html):
    """
    Displays the HTML delta report within the Jupyter Notebook.
    
    Parameters:
        report_html (str): The HTML delta report content.
    """
    display(HTML(report_html))
    

# Compare the dictionaries
delta_report = compare_feature_dicts(featureDict1, featureDict2)

# Generate the HTML delta report
report_html = generate_html_delta_report(delta_report)

# Display the report in the Jupyter Notebook
display_html_report(report_html)